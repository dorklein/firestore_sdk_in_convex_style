"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serverCodegen = serverCodegen;
var common_js_1 = require("./common.js");
function serverCodegen() {
    var serverDTS = "\n    ".concat((0, common_js_1.header)("Generated utilities for implementing server-side Convex query and mutation functions."), "\n    import {\n        GenericQueryCtx,\n        GenericMutationCtx,\n        QueryBuilder,\n        MutationBuilder,\n    } from \"@smartbill/firestore-convex-style/server\";\n    import type { DataModel } from \"./dataModel.js\";\n\n    /**\n     * Define a query in this Convex app's public API.\n     *\n     * This function will be allowed to read your Convex database and will be accessible from the client.\n     *\n     * @param func - The query function. It receives a {@link QueryCtx} as its first argument.\n     * @returns The wrapped query. Include this as an `export` to name it and make it accessible.\n     */\n    export const query: QueryBuilder<DataModel, \"public\">;\n\n    /**\n     * Define a query that is only accessible from other Convex functions (but not from the client).\n     *\n     * This function will be allowed to read from your Convex database. It will not be accessible from the client.\n     *\n     * @param func - The query function. It receives a {@link QueryCtx} as its first argument.\n     * @returns The wrapped query. Include this as an `export` to name it and make it accessible.\n     */\n    export const internalQuery: QueryBuilder<DataModel, \"internal\">;\n\n    /**\n     * Define a mutation in this Convex app's public API.\n     *\n     * This function will be allowed to modify your Convex database and will be accessible from the client.\n     *\n     * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.\n     * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.\n     */\n    export const mutation: MutationBuilder<DataModel, \"public\">;\n\n    /**\n     * Define a mutation that is only accessible from other Convex functions (but not from the client).\n     *\n     * This function will be allowed to modify your Convex database. It will not be accessible from the client.\n     *\n     * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.\n     * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.\n     */\n    export const internalMutation: MutationBuilder<DataModel, \"internal\">;\n\n    /**\n     * A set of services for use within Convex query functions.\n     *\n     * The query context is passed as the first argument to any Convex query\n     * function run on the server.\n     *\n     * This differs from the {@link MutationCtx} because all of the services are\n     * read-only.\n     */\n    export type QueryCtx = GenericQueryCtx<DataModel>;\n\n    /**\n     * A set of services for use within Convex mutation functions.\n     *\n     * The mutation context is passed as the first argument to any Convex mutation\n     * function run on the server.\n     */\n    export type MutationCtx = GenericMutationCtx<DataModel>;");
    var serverJS = "\n    ".concat((0, common_js_1.header)("Generated utilities for implementing server-side Convex query and mutation functions."), "\n    import {\n      queryGeneric,\n      mutationGeneric,\n      internalMutationGeneric,\n      internalQueryGeneric,\n    } from \"@smartbill/firestore-convex-style/server\";\n\n    /**\n     * Define a query in this Firestore app's public API.\n     *\n     * This function will be allowed to read your Convex database and will be accessible from the client.\n     *\n     * @param func - The query function. It receives a {@link QueryCtx} as its first argument.\n     * @returns The wrapped query. Include this as an `export` to name it and make it accessible.\n     */\n    export const query = queryGeneric;\n\n    /**\n     * Define a query that is only accessible from other Firestore functions (but not from the client).\n     *\n     * This function will be allowed to read from your Convex database. It will not be accessible from the client.\n     *\n     * @param func - The query function. It receives a {@link QueryCtx} as its first argument.\n     * @returns The wrapped query. Include this as an `export` to name it and make it accessible.\n     */\n    export const internalQuery = internalQueryGeneric;\n\n    /**\n     * Define a mutation in this Firestore app's public API.\n     *\n     * This function will be allowed to modify your Convex database and will be accessible from the client.\n     *\n     * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.\n     * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.\n     */\n    export const mutation = mutationGeneric;\n\n    /**\n     * Define a mutation that is only accessible from other Firestore functions (but not from the client).\n     *\n     * This function will be allowed to modify your Convex database. It will not be accessible from the client.\n     *\n     * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.\n     * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.\n     */\n    export const internalMutation = internalMutationGeneric;");
    return {
        DTS: serverDTS,
        JS: serverJS,
    };
}
